{"version":3,"sources":["Board/style.module.css","ChessPiece/style.module.css","services/chessmanFactory.js","ChessPiece/ChessPiece.js","services/services.js","Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","chessmanFactory","counter","Chessman","position","name","this","range","moveVectors","moveRange","img","setMoveRange","positionX","positionY","reduce","accumulator","current","tempMoveRange","i","xCurrent","yCurrent","rangeX","rangeY","push","concat","King","Queen","Rock","Bishop","Knight","chessPieces","createChessman","x","y","chessman","king","queen","rock","bishop","knight","errorMessage","Object","keys","includes","Error","resetCounter","ChessPiece","className","style","Squar","src","alt","title","require","getRandomNumber","max","Math","floor","random","getRandomArray","length","maxNumber","Array","map","areDimensionsSame","xX","yY","areDimensionsExistOnBoard","board","coordinates","some","chessPiece","getPosition","addNewChessPiec","newChessmanName","newChessPiec","Game","possibleBeats","previuse","piecesToBeat","forEach","piec","piecCoordinats","move","piecChess","gameBoard","fill","piece","history","Board","useState","mutationBoard","gamepaly","mutationGameplay","mutationRange","selfPoint","mutationSelfPoint","selectedPiec","mutationSelectedPiec","mutationHistory","reloadGame","historyBoard","console","log","clearRangeOnClick","getGame","showRange","getMoveRange","clearRangeOnMouseLeave","useEffect","message","indexGame","beatMessage","getFullName","index","key","onMouseEnter","event","target","Hover","addHoverStyle","onMouseLeave","replace","removeHoverStyle","BeatList","onClick","chessBoard","row","rowIndex","Row","columnIndex","squerStyle","inRange","beat","self","isPiece","Beat","InRange","Self","IsPiece","pieceIndex","findIndex","tempPiece","setPosition","splice","selesctPiecOrBeat","getImg","Message","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.413b1be4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Squar\":\"style_Squar__2oWEZ\",\"Row\":\"style_Row__6yvBO\",\"InRange\":\"style_InRange__38OUS\",\"Self\":\"style_Self__2JZTb\",\"Beat\":\"style_Beat__1uTXZ\",\"IsPiece\":\"style_IsPiece__2t05d\",\"Game\":\"style_Game__1kCmd\",\"Message\":\"style_Message__Ic-b_\",\"BeatList\":\"style_BeatList__1hSEn\",\"Hover\":\"style_Hover__1UnWH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Squar\":\"style_Squar__KihG3\"};","const chessmanFactory = (()=>{\n\nlet counter = 1;\n\nclass Chessman {\n    constructor(position, name){\n        this.position = position; // [x, y]\n        this.name = name; // \"string\"\n        this.range = 0;\n        this.moveVectors = [[0, 0]];\n        this.moveRange = [];\n        this.counter = counter++;\n        this.img = \"\";\n    }\n    setPosition(position){ \n        this.position = position;\n        this.setMoveRange();\n    }\n\n    setMoveRange(){\n        let [positionX, positionY] = this.position;\n        this.moveRange = this.moveVectors.reduce((accumulator, current) => {\n          let tempMoveRange = [];\n          for (let i = 1; i <= this.range; i++) {\n            let [xCurrent, yCurrent] = current;\n            let rangeX = xCurrent * i + positionX;\n            let rangeY = yCurrent * i + positionY;\n            if(\n              rangeX >= 0 &&\n              rangeX <= 7 &&\n              rangeY >= 0 &&\n              rangeY <= 7\n            ){\n              tempMoveRange.push([rangeX, rangeY]);\n            }            \n          }\n          return accumulator.concat(tempMoveRange);\n        }, []);\n    }\n\n    getMoveRange(){ return this.moveRange; }\n\n    getPosition(){ return this.position; }\n\n    getName(){ return this.name; }\n\n    getFullName(){ return `(${this.counter})${this.name} on position ${this.position[0]}/${this.position[1]}`; }\n\n    getImg(){\n      return this.img;\n    }\n    \n}\n\nclass King extends Chessman{\n    constructor(position){\n        super(position, \"King\")\n        this.range = 1;\n        this.img = \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Chess_kdt45.svg/50px-Chess_kdt45.svg.png\";\n        this.moveVectors = [\n            [-1, 0],\n            [-1, 1],\n            [0, 1],\n            [1, 1],\n            [1, 0],\n            [1, -1],\n            [0, -1],\n            [-1, -1]\n          ];\n        this.setMoveRange();\n    }\n}\n\nclass Queen extends Chessman {\n    constructor(position) {\n      super(position, \"Queen\");\n      this.range = 7;\n      this.img = \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Chess_qdt45.svg/50px-Chess_qdt45.svg.png\";\n      this.moveVectors = [\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n        [-1, -1]\n      ];\n      this.setMoveRange();\n    }\n  }\n\n  class Rock extends Chessman {\n    constructor(position) {\n      super(position, \"Rock\");\n      this.range = 7;\n      this.img = \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Chess_rdt45.svg/50px-Chess_rdt45.svg.png\";\n      this.moveVectors = [\n        [-1, 0],\n        [0, 1],\n        [1, 0],\n        [0, -1]\n      ];\n      this.setMoveRange();\n    }\n  }\n\n  class Bishop extends Chessman {\n    constructor(position) {\n      super(position, \"Bishop\");\n      this.range = 7;\n      this.img = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Chess_bdt45.svg/50px-Chess_bdt45.svg.png\";\n      this.moveVectors = [\n        [-1, 1],\n        [1, 1],\n        [1, -1],\n        [-1, -1]\n      ];\n      this.setMoveRange();\n    }\n  }\n\n  class Knight extends Chessman {\n    constructor(position) {\n      super(position, \"Knight\");\n      this.range = 1;\n      this.img = \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Chess_ndt45.svg/50px-Chess_ndt45.svg.png\";\n      this.moveVectors = [\n        [-1, 2],\n        [1, 2],\n        [2, 1],\n        [2, -1],\n        [1, -2],\n        [-1, -2],\n        [-2, -1],\n        [-2, 1]\n      ];\n      this.setMoveRange();\n    }\n  }\n\nreturn {\n    chessPieces: [\"king\", \"queen\", \"rock\", \"bishop\", \"knight\"],\n    createChessman: ( position, name ) => {\n        const [x, y] = position;\n        const chessman = {\n          king: King,\n          queen: Queen,\n          rock: Rock,\n          bishop: Bishop,\n          knight: Knight,\n        };\n        let errorMessage = \"\";\n        if (\n          x < 0 ||\n          x > 7 ||\n          y < 0 ||\n          y > 7\n        ) {\n          errorMessage += \"Position is out of board.\\n\";\n        }\n        if (!Object.keys(chessman).includes(name)) {\n          errorMessage += `Name \"${name}\" is incorrect.\\n`;\n        }\n        if (!!errorMessage) {\n          throw new Error(errorMessage);\n        }\n        return new chessman[name](position);\n      },\n      resetCounter: () => { counter = 1; }\n};\n\n})();\n\n\n\nmodule.exports = chessmanFactory;","import React from \"react\";\nimport style from \"./style.module.css\";\n\nconst ChessPiece = ({img, name}) => {\n    return (\n        <div className={style.Squar}>\n            <img src={img} alt={name} title={name}/>\n        </div>\n    );\n}\n\nexport default ChessPiece;","const { createChessman, chessPieces, resetCounter } = require(\"./chessmanFactory\");\n\n\n\nfunction getRandomNumber(max){\n    return Math.floor( Math.random() * max );\n}\n\nfunction getRandomArray(length, maxNumber){\n    return ([...new Array(length)].map(() => getRandomNumber(maxNumber)));\n}\n\nfunction areDimensionsSame([x, y], [xX, yY]){\n    return ((x === xX) && (y === yY));\n}\n\nfunction areDimensionsExistOnBoard(board, coordinates){\n    return board.some((chessPiece) => areDimensionsSame(chessPiece.getPosition(), coordinates));\n}\n\nfunction getPosition(board){\n    let coordinates = getRandomArray(2, 7);\n    if(!(board.length === 0)){\n        while(areDimensionsExistOnBoard(board, coordinates)){\n            coordinates = getRandomArray(2, 7);\n        }\n    }\n    return coordinates;\n}\n\nfunction addNewChessPiec(board){    \n        const newChessmanName = chessPieces[getRandomNumber(chessPieces.length)];\n        const position = getPosition(board);\n        let newChessPiec = createChessman(position, newChessmanName);\n        board.push(newChessPiec);\n        return board;\n}\n\nexport default class Game{\n    \n    static getGame(board = []){\n        let possibleBeats = [];        \n        resetCounter();\n        \n        while(true && board.length <= 64){\n            board = addNewChessPiec(board);\n            if(board.length < 2){\n                continue;\n            }else{\n                possibleBeats = board.reduce((previuse, current) => {\n                    let piecesToBeat = [];\n                    board.forEach((piec) => {\n                        let piecCoordinats = piec.getPosition();\n                        let possibilityOfBeat = current.moveRange.some(move => areDimensionsSame(move, piecCoordinats));\n                        if(possibilityOfBeat){ \n                            piecesToBeat.push(piec);\n                        }\n                    });\n                    if(piecesToBeat.length > 0 ){\n                        previuse.push({\n                            piecChess: current,\n                            piecesToBeat\n                        })\n                    }\n                    return previuse;\n                }, []);\n            }\n            if(possibleBeats.length > 0){\n                break;\n            }\n        }\n        let gameBoard = [...new Array(8)].map(() => new Array(8).fill(null));\n            board.forEach( piece => {\n                let [x, y] = piece.getPosition();\n                gameBoard[x][y] = piece;\n            });\n\n        return {gameBoard, possibleBeats, history: board};\n    }\n}\n","import React, {useState, useEffect} from \"react\";\nimport ChessPiece from \"../ChessPiece/ChessPiece\"\nimport style from \"./style.module.css\";\nimport Game from \"../services/services\"\n\n\nconst Board = () => {\n    let [board, mutationBoard] = useState([...new Array(8)].map(() => new Array(8).fill(null)));\n    let [gamepaly, mutationGameplay] = useState([]);\n    let [range, mutationRange] = useState([]);\n    let [selfPoint, mutationSelfPoint] = useState([]);\n    let [selectedPiec, mutationSelectedPiec] = useState(null);\n    let [history, mutationHistory] = useState([]);\n\n    useEffect(() =>{\n        reloadGame();\n    },[]);\n\n    function reloadGame(historyBoard = []){\n        console.log(historyBoard)\n        clearRangeOnClick();\n        let {gameBoard, possibleBeats, history} = Game.getGame(historyBoard);\n        mutationGameplay(possibleBeats);\n        mutationBoard(gameBoard);\n        mutationHistory(history);\n    }\n\n    function areDimensionsSame([x, y], [xX, yY]){\n        return ((x === xX) && (y === yY));\n    }\n\n    function showRange(piece){\n        mutationRange(piece.getMoveRange());\n        mutationSelfPoint(piece.getPosition());\n    }\n    function clearRangeOnMouseLeave(){\n        mutationRange([]);\n        mutationSelfPoint([]);\n        if(selectedPiec){ showRange(selectedPiec) };\n    }\n\n    function clearRangeOnClick(){\n        mutationSelectedPiec(null)\n        mutationRange([]);\n        mutationSelfPoint([]);\n    }\n    function selesctPiecOrBeat(piece){\n        if(!!selectedPiec){\n            console.log(selectedPiec,\"\\n\",piece);\n            let isInRange = selectedPiec.getMoveRange().some(coordinates => areDimensionsSame(coordinates, piece.getPosition()));\n            if(isInRange){\n                let pieceIndex = history.findIndex( tempPiece => areDimensionsSame(tempPiece.getPosition(), piece.getPosition()));\n                selectedPiec.setPosition(piece.getPosition());\n                history.splice(pieceIndex, 1);                \n                reloadGame(history);\n            } else{\n                mutationSelectedPiec(piece);\n                showRange(piece);\n            }         \n        }else{\n        mutationSelectedPiec(piece);\n        showRange(piece);\n        }\n    }\n    function emptyClick(coordinates){\n        console.log(coordinates);\n        let inRange = range.some(position => areDimensionsSame(position, coordinates));\n        if(inRange && selectedPiec){\n            selectedPiec.setPosition(coordinates);\n            reloadGame(history);\n        }else {\n            mutationSelectedPiec(null);\n            clearRangeOnClick();\n        }\n    }\n    function addHoverStyle(event){\n        event.target.className += ` ${style.Hover}`;\n    }\n    function removeHoverStyle(event){\n        event.target.className = event.target.className.replace(` ${style.Hover}`, \"\");\n    }\n\n    \n\n    let message = gamepaly.map(({piecChess, piecesToBeat}, indexGame) => {\n        let beatMessage = `${piecChess.getFullName()} can beat `;\n        piecesToBeat.forEach( (piece, index) => {\n            if(index === 0){\n                beatMessage += ` ${piece.getFullName()}`;\n            }else {\n                beatMessage += ` or ${piece.getFullName()}`;\n            }\n        });\n        return(\n            <li key={indexGame}\n                onMouseEnter={(event) => {\n                                showRange(piecChess);\n                                addHoverStyle(event); }}\n                onMouseLeave={(event) => { \n                                clearRangeOnMouseLeave();\n                                removeHoverStyle(event)}}\n                className={style.BeatList}\n                onClick={()=>{\n                    mutationSelectedPiec(piecChess);\n                    showRange(piecChess);\n                }}>\n                {beatMessage}.\n            </li>\n        );\n    });\n    \n    let chessBoard = board.map( (row, rowIndex) => \n        <div className={style.Row} key={rowIndex}>\n            { row.map( (chessPiece, columnIndex) => {\n                        let squerStyle = style.Squar;\n                        let inRange = range.some( coordinates => areDimensionsSame(coordinates, [rowIndex, columnIndex]));\n                        let beat = chessPiece ? range.some( coordinates => areDimensionsSame(coordinates, chessPiece.getPosition())) : false;\n                        let self = chessPiece ? areDimensionsSame([rowIndex, columnIndex], selfPoint) : false;\n                        let isPiece = chessPiece ? true : false;\n                        if(beat){\n                            squerStyle += ` ${style.Beat}`;\n                        }else if(inRange){\n                            squerStyle += ` ${style.InRange}`;\n                        }else if(self) {\n                            squerStyle += ` ${style.Self}`;\n                        }\n                        if(isPiece){\n                            squerStyle += ` ${style.IsPiece}`;\n                        }\n                        \n                        return (<div className={squerStyle}\n                                    key={`${rowIndex}${columnIndex}`}\n                                    onMouseEnter={() => {if(chessPiece){showRange(chessPiece)}}}\n                                    onMouseLeave={clearRangeOnMouseLeave}\n                                    onClick={() => { \n                                            if(chessPiece){\n                                                selesctPiecOrBeat(chessPiece);\n                                            }else{\n                                                emptyClick([rowIndex, columnIndex]);                                               \n                                            }\n                                            }}> \n                                        {chessPiece ? <ChessPiece \n                                                        img={chessPiece.getImg()} \n                                                        name={chessPiece.getFullName()} /> \n                                                    : null} \n                        </div>); \n                    }               \n                ) \n            }\n        </div> );\n\n    return (       \n        <div className={style.Game}>\n            <button onClick={() => reloadGame()}>Reload Game</button>\n            <article className={style.Game}>\n                {chessBoard}\n                <ul className={style.Message}>\n                    {message}\n                </ul>                \n            </article>\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from \"./Board/Board\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}